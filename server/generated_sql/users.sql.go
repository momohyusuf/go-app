// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package generated_sql

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
user_name, email, user_password, age, created_at, updated_at
) VALUES (
    $1, $2, $3, $4, $5, $6
)

RETURNING  user_name, email, created_at
`

type CreateUserParams struct {
	UserName     string
	Email        string
	UserPassword string
	Age          int32
	CreatedAt    pgtype.Timestamp
	UpdatedAt    pgtype.Timestamp
}

type CreateUserRow struct {
	UserName  string
	Email     string
	CreatedAt pgtype.Timestamp
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.UserName,
		arg.Email,
		arg.UserPassword,
		arg.Age,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i CreateUserRow
	err := row.Scan(&i.UserName, &i.Email, &i.CreatedAt)
	return i, err
}

const findUserByEmail = `-- name: FindUserByEmail :one
SELECT user_id, user_name, email, user_password, user_type
FROM users
WHERE email = $1
`

type FindUserByEmailRow struct {
	UserID       int32
	UserName     string
	Email        string
	UserPassword string
	UserType     pgtype.Text
}

func (q *Queries) FindUserByEmail(ctx context.Context, email string) (FindUserByEmailRow, error) {
	row := q.db.QueryRow(ctx, findUserByEmail, email)
	var i FindUserByEmailRow
	err := row.Scan(
		&i.UserID,
		&i.UserName,
		&i.Email,
		&i.UserPassword,
		&i.UserType,
	)
	return i, err
}
